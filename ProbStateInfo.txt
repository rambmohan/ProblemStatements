//----------------------  Elevator ----------------------------------
import java.util.LinkedHashSet;
public class Elevator {
	public static void main(String[] args) {
		System.out.println("Number of stops");
		int stops = solution(new int[]{40,40,100, 80,20}, new int[]{3,3,2,2,3}, 3, 5, 200);
		System.out.println(stops);
	}
    /*A = Weights array
      B = Target floor
      M = No of floors
      X = Max capacity
      Y = Max weight
      */
    public static int solution(int[] A, int[] B, int M, int X, int Y) {
        if(A.length != B.length) {
            return 0;
        }
        int ans = solve(A,B,M,X,Y);
        return ans;
    }

    private static int solve(int[] weights, int[] targetFloor, int totalFloors, int maxCap, int maxWeight) {
        int length = weights.length;
        int i = 0;
        int stops = 0;
        while(i < length) {
            long groupWeight = 0;
            int cap = 0;

            LinkedHashSet uniqueFloors = new LinkedHashSet();
            while(cap < maxCap && i < length && groupWeight + weights[i] <= maxWeight) {
                groupWeight = groupWeight + weights[i];
                uniqueFloors.add(targetFloor[i]);
                i++;
                cap++;
            }
            stops = stops + uniqueFloors.size() + 1;
        }
        return stops;
    }
}

//------------------------------- Prob1 - SortingUsingOneSwap ---------------------------------

import java.util.Arrays;
//class
public class  Prob1 - SortingUsingOneSwap{
	//starting point
	public static void main(String[] args) {
		int arr[] = {1,5,3,3,7};	 
		boolean chk = check(arr);
		System.out.println(chk);
	}
	public static boolean check( int[] A) {
		int count = 0;
		int[] B = Arrays.copyOf(A, A.length);
		Arrays.sort(B);
		for (int i = 0; i < A.length; i++) {
			if (A[i] != B[i])
				count++;
		}
		if (count > 2)
			return false;		
		return true;
	}
}

//---------------------------Problem2LinkedList  ----------------------

//store node
class Node 
{ 
    int data; 			//data part
    Node address; 		//address
    Node(int d)  { data = d;  address = null; } 
}

//linked list, create list, count number of nodes
class LinkedList 
{   
	Node head;
	//add node in list
    public void add(int new_data) 
    {
        Node new_node = new Node(new_data); //creating node
        new_node.address = head; 		//linking nodes
        head = new_node; 
    } 
    
    public int getCount() 
    { 
        Node temp = head; 
        int count = 0; 
        while (temp != null) 
        { 
            count++; 
            temp = temp.address; 
        } 
        return count; 
    }
}

public class Problem2LinkedList{
	public static void main(String[] args) 
    { 
		LinkedList list = new LinkedList(); 
        list.add(1); 
        list.add(3); 
        list.add(1); 
        list.add(2); 
        list.add(1); 
        int cnt = list.getCount();
        System.out.println(cnt); 
    } 	
}
//-----------------------Problem3MultiGreaterAddition-----------------------
public class Problem3MultiGreaterAddition {
	public static void main(String[] args) {
		System.out.println("Total multiplicative pair: ");
		int A[] = new int[]{0, 1, 2, 2, 3, 5};
		int B[] = new int[]{500000, 500000, 0, 0,0, 20000};
		System.out.println("Count: "+ solution(A, B));
	}

	public static int solution(int A[], int B[]){
		int count = 0;
		double C[] = new double[A.length];
		for(int i=0;i<A.length;i++)
		{
			C[i]=(double)A[i]+(double)B[i]/1000000;
		}
		
		
		for(int i=0;i<A.length;i++){
			for(int j=i+1;j<A.length;j++){
				if((C[i]*C[j]) >= (C[i]+C[j])){
					count ++;
				} 
			}
		}
		return count;
	}
}
//-----------------------Problem4LeaderSelection-----------------------
public class Problem4LeaderSelection {
	public static void main(String[] args) {
		findMajority(new int[]{1,1,1,1,50});
	}
	
	public static void findMajority(int A[]) 
	{ 
		int maxCount = 0;  	//nothing but max count of certain element
		int index = -1;		//index of array
		int N = A.length;	//length of array
		for(int i = 0; i < N; i++) 
		{ 
			int count = 0;
			for(int j = 0; j < N; j++) 
			{ 
				if(A[i] == A[j]) 
					count++; 
			} 
			if(count > maxCount) 
			{ 
				maxCount = count; 
				index = i; 
			} 
		} 
		if (maxCount > N/2) 
			System.out.println("Leader: " + A[index]); 
		else
			System.out.println("No Majority Element (leader)"); 
	} 
}
//------------------------Problem8-minimum absolute sum----------------------
import java.util.Arrays;
public class Problem8-minimum absolute sum {
	public static void main(String[] args) {
		System.out.println("minimum absolute sum: ");
		System.out.println(solution1(new int[]{2, -4, 6, -3, 9}));
	}
	public static int solution1(int A[]){
		int N = A.length;
		Arrays.sort(A);
		int tail = 0;
		int head = N - 1;
		int minAbsSum = Math.abs(A[tail] + A[head]);
		while (tail <= head) {
			int currentSum = A[tail] + A[head];
			minAbsSum = Math.min(minAbsSum, Math.abs(currentSum));
			if (currentSum <= 0)
				tail++;
			else
				head--;
		}
		return minAbsSum;
	}	 
}
//-------------------------Problem9SaddlePoint---------------------
class Problem9SaddlePoint 
{
    public static void main(String[] args)  
    { 
        int mat[][] = {
        		{4, 5, 6},
        		{7, 18, 9},
        		{5, 1, 3}       		   
        		  };
        solution(mat);
    }      
    public static void solution(int[][] A)
    {
    	int max, min, x, f = 0;
    	
		for (int i = 0; i < A.length; i++) {
			min = A[i][0]; 
			x = 0;
			for (int j = 0; j < A[i].length; j++) {
				if (A[i][j] < min) {
					min = A[i][j];
					x = j; 							
				}
			}
			max = A[0][x]; 
			for (int k = 0; k < A.length; k++) {
				if (A[k][x] > max) {
					max = A[k][x];
				}
			}	
			if (max == min) {
				System.out.println("Saddle point = " + max);
				f = 1;		//kind of flag which indicates 
							//if loop is executed or not
			}
		}
		if (f == 0) {
			System.out.println("No saddle point");
		}
    }
} 
//-------------------------Problem12-PasswordForEmail---------------------
public class -Problem12-PasswordForEmail {
	public static void main(String[] args) {
		solution("w232111esdfsd23qwgggggggerw2cwwwwwwes");
	}
	public static void solution(String testString){
		//split 
		String[] s = testString.split("[0-9]");	//RE
		int length = 0;			int index = -1;	
		for(int i=0; i< s.length; i++){
			if(s[i].matches("[a-z]*.*[A-Z].*[a-z]*")){	//RE
				if(length <= s[i].length()){
					length = s[i].length();
					index = i;
				}   }	}
		
		if(index >= 0)   System.out.println(s[index].length());
		else System.out.println("password not found");		
	}
}
//--------------------------Problem14BinaryCounting--------------------
class Problem14BinaryCounting 
{
	public static void main(String args[]) 
	{ 
		System.out.print("Total number bits set to 1: ");
		System.out.print(solution(7,3)); 
	} 
	public static int solution(int A, int B) 
	{ 
		int n = A*B;		//step 1 
		int count = 0;		//counting number of 1
		while (n > 0) 
		{
			count = count + ( n & 1 );	//bitwise  AND
			n >>= 1; 					//right shifting		
		} 
		return count; 
	} 
}
//--------------------------Problem15-BracesEnclosingLogic--------------------
public class Problem15-BracesEnclosingLogic  
{ 
	public static void main(String[] args) 
	{ 
		String str = "";
		//String str = "(())))(";		
		System.out.println(solution(str)); 
	} 
	public static int solution(String s) { 
	    int closingBracket = 0;
	    int openingBracket = 0;
	    for (int i = 0; i < s.length(); i++) {
	        char c = s.charAt(i);
	        if (c == ')') {
	            closingBracket++;
	        }
	    }
	    for (int i = 0; i < s.length(); i++) {
	        if (openingBracket == closingBracket) {
	            return i;
	        }
	        char c = s.charAt(i);
	        if (c == ')') {
	            closingBracket--;
	        } else if (c == '(') {
	            openingBracket++;
	        }
	    }
	    return -1;
	}
} 
//--------------------------Problem16 - PeroidLogic--------------------
public class Problem16 - PeroidLogic {
    public static void main(String[] args) {
        System.out.println("\nEx1: " + solution(3453));
   }
    public static int solution(int n) {
        int[] d = new int[30];
        int len = 0, res = -1;
        
        while (n > 0) {
            d[len] = n % 2;	
            n /= 2;
            len++;
        } 
        for (int p = 1; p < len; p++) {
            if (p <= len / 2) {
                boolean ok = true;
                for (int i = 0; i < len - p; i++) {
                    if (d[i] != d[i + p]) {
                        ok = false;
                        break;
                    }
                }
                if (ok) {
                    res = p;
                }
            }
        }
         
        return res;
    }
}
//-------------------------Problem17-IdenticalIndicesCount---------------------
class Problem17-IdenticalIndicesCount {  
	public static void main (String[] args) 
	{ 
		int arr[] = {3,5,6,3,3,5};
		System.out.println(solution(arr)); 
	} 
	public static int solution(int A[]) 
	{ 
		int count = 0;    
		for (int P = 0; P < A.length; P++){			
			for (int Q = P+1; Q < A.length; Q++){ 
				if (A[P] == A[Q]){
					count++; 
				}
			}
		}
		return count; 
	} 
}